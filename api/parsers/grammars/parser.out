Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> expression NEWLINE start
Rule 2     start -> expression
Rule 3     expression -> OPEN_BRACKET generator CLOSE_BRACKET
Rule 4     generator -> pairs
Rule 5     generator -> numbers
Rule 6     numbers -> NUM COMMA generator
Rule 7     numbers -> NUM
Rule 8     pairs -> OPEN_BRACKET NUM COMMA NUM CLOSE_BRACKET COMMA generator
Rule 9     pairs -> OPEN_BRACKET NUM COMMA NUM CLOSE_BRACKET
Rule 10    pairs -> OPEN_BRACKET LABEL COMMA NUM CLOSE_BRACKET COMMA generator
Rule 11    pairs -> OPEN_BRACKET LABEL COMMA NUM CLOSE_BRACKET

Terminals, with rules where they appear

CLOSE_BRACKET        : 3 8 9 10 11
COMMA                : 6 8 8 9 10 10 11
LABEL                : 10 11
NEWLINE              : 1
NUM                  : 6 7 8 8 9 9 10 11
OPEN_BRACKET         : 3 8 9 10 11
error                : 

Nonterminals, with rules where they appear

expression           : 1 2
generator            : 3 6 8 10
numbers              : 5
pairs                : 4
start                : 1 0

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . expression NEWLINE start
    (2) start -> . expression
    (3) expression -> . OPEN_BRACKET generator CLOSE_BRACKET

    OPEN_BRACKET    shift and go to state 3

    start                          shift and go to state 1
    expression                     shift and go to state 2

state 1

    (0) S' -> start .



state 2

    (1) start -> expression . NEWLINE start
    (2) start -> expression .

    NEWLINE         shift and go to state 4
    $end            reduce using rule 2 (start -> expression .)


state 3

    (3) expression -> OPEN_BRACKET . generator CLOSE_BRACKET
    (4) generator -> . pairs
    (5) generator -> . numbers
    (8) pairs -> . OPEN_BRACKET NUM COMMA NUM CLOSE_BRACKET COMMA generator
    (9) pairs -> . OPEN_BRACKET NUM COMMA NUM CLOSE_BRACKET
    (10) pairs -> . OPEN_BRACKET LABEL COMMA NUM CLOSE_BRACKET COMMA generator
    (11) pairs -> . OPEN_BRACKET LABEL COMMA NUM CLOSE_BRACKET
    (6) numbers -> . NUM COMMA generator
    (7) numbers -> . NUM

    OPEN_BRACKET    shift and go to state 5
    NUM             shift and go to state 9

    generator                      shift and go to state 6
    pairs                          shift and go to state 7
    numbers                        shift and go to state 8

state 4

    (1) start -> expression NEWLINE . start
    (1) start -> . expression NEWLINE start
    (2) start -> . expression
    (3) expression -> . OPEN_BRACKET generator CLOSE_BRACKET

    OPEN_BRACKET    shift and go to state 3

    expression                     shift and go to state 2
    start                          shift and go to state 10

state 5

    (8) pairs -> OPEN_BRACKET . NUM COMMA NUM CLOSE_BRACKET COMMA generator
    (9) pairs -> OPEN_BRACKET . NUM COMMA NUM CLOSE_BRACKET
    (10) pairs -> OPEN_BRACKET . LABEL COMMA NUM CLOSE_BRACKET COMMA generator
    (11) pairs -> OPEN_BRACKET . LABEL COMMA NUM CLOSE_BRACKET

    NUM             shift and go to state 11
    LABEL           shift and go to state 12


state 6

    (3) expression -> OPEN_BRACKET generator . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 13


state 7

    (4) generator -> pairs .

    CLOSE_BRACKET   reduce using rule 4 (generator -> pairs .)


state 8

    (5) generator -> numbers .

    CLOSE_BRACKET   reduce using rule 5 (generator -> numbers .)


state 9

    (6) numbers -> NUM . COMMA generator
    (7) numbers -> NUM .

    COMMA           shift and go to state 14
    CLOSE_BRACKET   reduce using rule 7 (numbers -> NUM .)


state 10

    (1) start -> expression NEWLINE start .

    $end            reduce using rule 1 (start -> expression NEWLINE start .)


state 11

    (8) pairs -> OPEN_BRACKET NUM . COMMA NUM CLOSE_BRACKET COMMA generator
    (9) pairs -> OPEN_BRACKET NUM . COMMA NUM CLOSE_BRACKET

    COMMA           shift and go to state 15


state 12

    (10) pairs -> OPEN_BRACKET LABEL . COMMA NUM CLOSE_BRACKET COMMA generator
    (11) pairs -> OPEN_BRACKET LABEL . COMMA NUM CLOSE_BRACKET

    COMMA           shift and go to state 16


state 13

    (3) expression -> OPEN_BRACKET generator CLOSE_BRACKET .

    NEWLINE         reduce using rule 3 (expression -> OPEN_BRACKET generator CLOSE_BRACKET .)
    $end            reduce using rule 3 (expression -> OPEN_BRACKET generator CLOSE_BRACKET .)


state 14

    (6) numbers -> NUM COMMA . generator
    (4) generator -> . pairs
    (5) generator -> . numbers
    (8) pairs -> . OPEN_BRACKET NUM COMMA NUM CLOSE_BRACKET COMMA generator
    (9) pairs -> . OPEN_BRACKET NUM COMMA NUM CLOSE_BRACKET
    (10) pairs -> . OPEN_BRACKET LABEL COMMA NUM CLOSE_BRACKET COMMA generator
    (11) pairs -> . OPEN_BRACKET LABEL COMMA NUM CLOSE_BRACKET
    (6) numbers -> . NUM COMMA generator
    (7) numbers -> . NUM

    OPEN_BRACKET    shift and go to state 5
    NUM             shift and go to state 9

    generator                      shift and go to state 17
    pairs                          shift and go to state 7
    numbers                        shift and go to state 8

state 15

    (8) pairs -> OPEN_BRACKET NUM COMMA . NUM CLOSE_BRACKET COMMA generator
    (9) pairs -> OPEN_BRACKET NUM COMMA . NUM CLOSE_BRACKET

    NUM             shift and go to state 18


state 16

    (10) pairs -> OPEN_BRACKET LABEL COMMA . NUM CLOSE_BRACKET COMMA generator
    (11) pairs -> OPEN_BRACKET LABEL COMMA . NUM CLOSE_BRACKET

    NUM             shift and go to state 19


state 17

    (6) numbers -> NUM COMMA generator .

    CLOSE_BRACKET   reduce using rule 6 (numbers -> NUM COMMA generator .)


state 18

    (8) pairs -> OPEN_BRACKET NUM COMMA NUM . CLOSE_BRACKET COMMA generator
    (9) pairs -> OPEN_BRACKET NUM COMMA NUM . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 20


state 19

    (10) pairs -> OPEN_BRACKET LABEL COMMA NUM . CLOSE_BRACKET COMMA generator
    (11) pairs -> OPEN_BRACKET LABEL COMMA NUM . CLOSE_BRACKET

    CLOSE_BRACKET   shift and go to state 21


state 20

    (8) pairs -> OPEN_BRACKET NUM COMMA NUM CLOSE_BRACKET . COMMA generator
    (9) pairs -> OPEN_BRACKET NUM COMMA NUM CLOSE_BRACKET .

    COMMA           shift and go to state 22
    CLOSE_BRACKET   reduce using rule 9 (pairs -> OPEN_BRACKET NUM COMMA NUM CLOSE_BRACKET .)


state 21

    (10) pairs -> OPEN_BRACKET LABEL COMMA NUM CLOSE_BRACKET . COMMA generator
    (11) pairs -> OPEN_BRACKET LABEL COMMA NUM CLOSE_BRACKET .

    COMMA           shift and go to state 23
    CLOSE_BRACKET   reduce using rule 11 (pairs -> OPEN_BRACKET LABEL COMMA NUM CLOSE_BRACKET .)


state 22

    (8) pairs -> OPEN_BRACKET NUM COMMA NUM CLOSE_BRACKET COMMA . generator
    (4) generator -> . pairs
    (5) generator -> . numbers
    (8) pairs -> . OPEN_BRACKET NUM COMMA NUM CLOSE_BRACKET COMMA generator
    (9) pairs -> . OPEN_BRACKET NUM COMMA NUM CLOSE_BRACKET
    (10) pairs -> . OPEN_BRACKET LABEL COMMA NUM CLOSE_BRACKET COMMA generator
    (11) pairs -> . OPEN_BRACKET LABEL COMMA NUM CLOSE_BRACKET
    (6) numbers -> . NUM COMMA generator
    (7) numbers -> . NUM

    OPEN_BRACKET    shift and go to state 5
    NUM             shift and go to state 9

    generator                      shift and go to state 24
    pairs                          shift and go to state 7
    numbers                        shift and go to state 8

state 23

    (10) pairs -> OPEN_BRACKET LABEL COMMA NUM CLOSE_BRACKET COMMA . generator
    (4) generator -> . pairs
    (5) generator -> . numbers
    (8) pairs -> . OPEN_BRACKET NUM COMMA NUM CLOSE_BRACKET COMMA generator
    (9) pairs -> . OPEN_BRACKET NUM COMMA NUM CLOSE_BRACKET
    (10) pairs -> . OPEN_BRACKET LABEL COMMA NUM CLOSE_BRACKET COMMA generator
    (11) pairs -> . OPEN_BRACKET LABEL COMMA NUM CLOSE_BRACKET
    (6) numbers -> . NUM COMMA generator
    (7) numbers -> . NUM

    OPEN_BRACKET    shift and go to state 5
    NUM             shift and go to state 9

    generator                      shift and go to state 25
    pairs                          shift and go to state 7
    numbers                        shift and go to state 8

state 24

    (8) pairs -> OPEN_BRACKET NUM COMMA NUM CLOSE_BRACKET COMMA generator .

    CLOSE_BRACKET   reduce using rule 8 (pairs -> OPEN_BRACKET NUM COMMA NUM CLOSE_BRACKET COMMA generator .)


state 25

    (10) pairs -> OPEN_BRACKET LABEL COMMA NUM CLOSE_BRACKET COMMA generator .

    CLOSE_BRACKET   reduce using rule 10 (pairs -> OPEN_BRACKET LABEL COMMA NUM CLOSE_BRACKET COMMA generator .)

